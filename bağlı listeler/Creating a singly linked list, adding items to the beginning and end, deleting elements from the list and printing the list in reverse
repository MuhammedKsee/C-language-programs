#include<stdio.h>
#include<stdlib.h>

struct node{
    struct node *next;
    int data;
};

int createList(int data){
    struct node *head = (struct node *)malloc(sizeof(struct node));
    head->data = data;
    head->next = NULL;

}

void printer(struct node *head){
    struct node *temp = head;
    
    while(temp!=NULL){
        printf("%d -> ",temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int addFront(struct node *head,int data){
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = data;
    
    if(head!=NULL){
    temp->next = head;
    head = temp;
    }
    else{
        head = temp;
    }
}

int addNext(int data, struct node *head,int newData){
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = newData;
    struct node *current = head;
    
    if(head->next ==NULL){
        head->next = temp;
        temp->next = NULL;
    }
    else{
        while(current->data !=data && current->next != NULL){
            current = current->next;
        }
        if(current->data == data && current->next == NULL){
            current->next = temp;
            temp->next = NULL;
        }
        else if(current->data == data && current->next != NULL){
            temp->next = current->next;
            current->next = temp;
        }
        else if(current->data != data){
            printf("%d isn't find\n",data);
        }
    }
}


int del(int data,struct node *head){
    struct node *temp = head;
    if(head->data == data){
        head = temp->next;
        temp = NULL;
        return head;
    }
    else{    
        while(temp->next->data != data){
            temp = temp->next;
        }
        if(temp->next->data == data){
            temp->next = temp->next->next;
        }
    }
}

void deleteList(struct node *head){
    struct node *temp = (struct node *)malloc(sizeof(struct node));
        while(head->next!= NULL){
                temp = head;
                while(temp->next->next!=NULL){
                temp = temp->next;
                }
                temp->next = NULL;
        }
        free(head);
        return 0;
    }

int main(){
    struct node *head = createList(11);
    printer(head);
    head = addFront(head,13);
    printer(head);
    addNext(11,head,10);
    printer(head);
    addNext(13,head,12);
    printer(head);
    addNext(14,head,12);
    printer(head);
    head = del(13,head);
    printer(head);
    del(10,head);
    printer(head);
    del(11,head);
    printer(head);
    addNext(12,head,11);
    addNext(11,head,10);
    addNext(10,head,9);
    printer(head);
    deleteList(head);
    printer(head);
}


